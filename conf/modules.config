/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

/*
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
*/

    withName: FASTP {
        ext.args = { [
            params.trim_length ? "-f ${params.trim_length} -t ${params.trim_length}" : '',
            '--cut_front --cut_front_mean_quality 20',
            '--cut_tail --cut_tail_mean_quality 20',
            "--length_required ${params.min_length}"
        ].join(' ').trim() }
        cpus   = { 1      * task.attempt }
        memory = { 16.GB  * task.attempt }
        time   = { 1.h    * task.attempt }
        publishDir = [
          [
            path: { "${params.outdir}/fastp" },
            mode: params.publish_dir_mode,
            pattern: "*.{html,json}"
          ],
          [
            enabled: params.store_trimmed,
            path: { "${params.outdir}/fastp" },
            mode: params.publish_dir_mode,
            pattern: "*.{fastq.gz}"
          ]
        ]
    }

    withName: NANOPLOT {
        cpus   = { 1      * task.attempt }
        memory = { 8.GB   * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/nanoplot/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,html}"
        ]
    }

    withName: POD5 {
        ext.args = { [
            ''
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/pod5" },
            mode: params.publish_dir_mode,
            pattern: "*.pod5"
        ]
    }

    withName: DORADO {
        ext.args = { [
            '--device cuda:all'
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        beforeScript = 'echo $HOSTNAME; nvidia-smi'
        publishDir = [
            path: { "${params.outdir}/dorado" },
            mode: params.publish_dir_mode,
            pattern: "*.fastq.gz"
        ]
    }

    withName: MINIMAP2_ALIGN {
        ext.args = { [
            "-x ${params.mapping_preset}",
            "-R \'@RG\\tID:RG1\\tSM:${meta.id}\'"
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/minimap2" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,bai}"
        ]
    }

    withName: 'SAMTOOLS_VIEW' {
        ext.args = { "-F 260 -q ${params.min_mapq}" }
        ext.prefix = { "${meta.id}.mq${params.min_mapq}" }
        cpus   = { 2     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
        publishDir = [
            path: { "${params.outdir}/minimap2" },
            pattern: '*.{bam,bai}',
            mode: params.publish_dir_mode,
        ]
    }

    withName: MOSDEPTH {
        ext.args = '-n'
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/mosdepth" },
            mode: params.publish_dir_mode,
            pattern: "*.{txt,gz}"
        ]
    }

    withName: 'SAMTOOLS_FLAGSTAT|SUMMARIZE_STATS' {
        cpus   = { 1     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
        publishDir = [
            path: { "${params.outdir}/stats" },
            pattern: '*.{flagstat,txt,tsv,bed}',
            mode: params.publish_dir_mode,
        ]
    }

    withName: CLAIR3 {
        ext.args = { [
            "--min_coverage=${params.min_coverage}",
            '--enable_variant_calling_at_sequence_head_and_tail',
            '--var_pct_full=1',
            '--ref_pct_full=1',
            '--var_pct_phasing=1',
            '--enable_phasing',
            '--use_whatshap_for_final_output_phasing',
            '--remove_intermediate_dir',
            '--gvcf'
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 8.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/clair3" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,gvcf.gz}"
//            saveAs: { filename -> "${task.ext.prefix?: meta.id}_${filename}" }
        ]
    }

    withName: 'FOCALPOS_CLAIR3' {
        cpus   = { 1     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 2.h   * task.attempt }
        publishDir = [
            path: { "${params.outdir}/clair3" },
            pattern: '*.focal.vcf',
            mode: params.publish_dir_mode,
        ]
    }

    withName: DEEPVARIANT_RUNDEEPVARIANT {
        ext.args = { [
            '--model_type=ONT_R104'
        ].join(' ').trim() }
        cpus   = { 8      * task.attempt }
        memory = { 64.GB  * task.attempt }
        time   = { 8.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,vcf.gz.tbi}",
        ]
    }

    withName: 'FOCALPOS_DV' {
        cpus   = { 1     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 2.h   * task.attempt }
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            pattern: '*.focal.vcf',
            mode: params.publish_dir_mode,
        ]
    }

    withName: GATK4_HAPLOTYPECALLER {
        ext.args = { [
            '--sample-ploidy 2',
            '--emit-ref-confidence GVCF',
            '-G StandardAnnotation',
            '-G StandardHCAnnotation',
            '-G AS_StandardAnnotation'
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 8.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/haplotypecaller" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,tbi}"
        ]
    }

    withName: SNIFFLES_SINGLE {
        ext.args = { [
            ''
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/sniffles" },
            mode: params.publish_dir_mode,
            pattern: "*.snf"
        ]
    }

    withName: SNIFFLES_JOINT {
        ext.args = { [
            ''
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/sniffles" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf"
        ]
    }

    withName: CUTESV_SINGLE {
        ext.args = { [
            "--sample ${meta.id}",
            '--max_cluster_bias_INS 100',
            '--diff_ratio_merging_INS 0.3',
            '--max_cluster_bias_DEL 100',
            '--diff_ratio_merging_DEL 0.3'
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/cutesv" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf"
        ]
    }

    withName: SURVIVOR_MERGE2 {
        ext.args = { [
            ''
        ].join(' ').trim() }
        cpus   = { 1      * task.attempt }
        memory = { 8.GB   * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/survivor" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf"
        ]
    }

    withName: CUTESV_GENOTYPE {
        ext.prefix = { "${meta.id}.genotyped" }
        ext.args = { [
            "--sample ${meta.id}",
            '--genotype',
            '--min_mapq 10'
        ].join(' ').trim() }
        cpus   = { 4      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            enabled: false,
            path: { "${params.outdir}/cutesv" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf"
        ]
    }

    withName: GATK4_COMBINEGVCFS {
        cpus   = { 1     * task.attempt }
        memory = { 32.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName: GATK4_GENOTYPEGVCFS {
        cpus   = { 4     * task.attempt }
        memory = { 32.GB * task.attempt }
        time   = { 8.h   * task.attempt }
        publishDir = [
            path: { "${params.outdir}/gatk/${meta.caller}" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf.gz"
        ]
    }

    withName: GLNEXUS {
        cpus   = { 4      * task.attempt }
        memory = { 64.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/glnexus/${meta.caller}" },
            mode: params.publish_dir_mode,
            pattern: "*.bcf"
        ]
    }

    withName: EAGLE2 {
        ext.args = { [
            "--geneticMapFile /opt/eagle2/tables/genetic_map_hg38_withX.txt.gz",
            "--vcfOutFormat z"
        ].join(' ').trim() }
        publishDir = [
            path: { "${params.outdir}/eagle2/${meta.caller}_${meta.typer}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bcf,vcf.gz,log}"
        ]
    }

    withName: 'WHATSHAP_PHASE|WHATSHAP_STATS' {
        cpus   = { 1     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
        publishDir = [
            path: { "${params.outdir}/whatshap/${meta.caller}_${meta.typer}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,vcf.gz.tbi,gtf,bed}"
        ]
    }

    withName: IGVREPORTS_ALL {
        ext.args = { [
            "--tracks ${sites}",
            "--sample-columns DP GQ",
            "--flanking 200"
        ].join(' ').trim() }
        cpus   = { 1      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/igvreports/${meta.caller}_${meta.typer}" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
    }

    withName: IGVREPORTS_SAMPLE {
        ext.args = { [
            "--tracks ${sites}",
            "--samples ${meta.sample}",
            "--sample-columns DP GQ",
            "--flanking 100",
            "--subsample 0.1"
        ].join(' ').trim() }
        cpus   = { 1      * task.attempt }
        memory = { 64.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/igvreports/${meta.caller}_${meta.typer}" },
            mode: params.publish_dir_mode,
            pattern: "*.html"
        ]
    }

    withName: ENSEMBLVEP_DOWNLOAD {
        cpus   = { 1     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withName: ENSEMBLVEP_VEP {
        ext.args = "--offline --merged --tab --no_stats --check_existing --everything"
        ext.prefix = { "${meta.id}.annotated" }
        cpus   = { 1      * task.attempt }
        memory = { 32.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/vep/${meta.caller}_${meta.typer}" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,tab.gz,json.gz,html}"
        ]
    }

    withName: GENOTYPES_TO_VEP {
        cpus   = { 1      * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 4.h    * task.attempt }
        publishDir = [
            path: { "${params.outdir}/vep/${meta.caller}_${meta.typer}" },
            mode: params.publish_dir_mode,
            pattern: "*.genotypes.tab"
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        cpus   = { 1     * task.attempt }
        memory = { 8.GB  * task.attempt }
        time   = { 2.h   * task.attempt }
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
